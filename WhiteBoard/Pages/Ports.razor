@page "/ports"
<SourceCodeLink Repository="Blazor.Diagrams" Page="@(nameof(Ports))" />

<div style="height: 1000px; width: 1000px;">

<Diagram @ref="Diagram">
    <Nodes>
        <style>
            .port-node {
                width: 4em;
                height: 3em;
                display: grid;
                place-items: center;
                text-align: center;
            }
        </style>
        @foreach (var node in nodes)
        {
            <Node @key="@(node.Id)" Id="@(node.Id)" @bind-X="node.X" @bind-Y="node.Y" Type="node.Type" MinHeight="30" MinWidth="60" ContentClasses="port-node">
                @node.Text
            </Node>
        }
    </Nodes>
    <Links>
        @foreach (var link in links)
        {
            <Link @key="link.Source.NodeId + link.Target.NodeId" Source="link.Source" Target="link.Target" />
        }
    </Links>
    <NavigationSettings Origin="origin" />
</Diagram>
</div>

@code {
    private Excubo.Blazor.Diagrams.Point origin { get; set; } = new Excubo.Blazor.Diagrams.Point(-200, -200);
    public class MyNodeDefinition
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public string Text { get; set; }
        public NodeType Type { get; set; }
    }
    List<MyNodeDefinition> nodes = new string[] { "r", "d", "e" }.SelectMany((prefix, index) => new List<MyNodeDefinition>
{
        new MyNodeDefinition { Id = prefix + "c", X = ((index == 1) ? 500 : 0) + 0, Y = ((index == 2) ? 500 : 0) + 0, Text = "Center", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "n", X = ((index == 1) ? 500 : 0) + 0, Y = ((index == 2) ? 500 : 0) - 150, Text = "North", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "s", X = ((index == 1) ? 500 : 0) + 0, Y = ((index == 2) ? 500 : 0) + 150, Text = "South", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "e", X = ((index == 1) ? 500 : 0) + 150, Y = ((index == 2) ? 500 : 0) + 0, Text = "East", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "w", X = ((index == 1) ? 500 : 0) - 150, Y = ((index == 2) ? 500 : 0) + 0, Text = "West", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "ne", X = ((index == 1) ? 500 : 0) + 150, Y = ((index == 2) ? 500 : 0) - 150, Text = "North East", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "se", X = ((index == 1) ? 500 : 0) + 150, Y = ((index == 2) ? 500 : 0) + 150, Text = "South East", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "sw", X = ((index == 1) ? 500 : 0) - 150, Y = ((index == 2) ? 500 : 0) + 150, Text = "South West", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "nw", X = ((index == 1) ? 500 : 0) - 150, Y = ((index == 2) ? 500 : 0) - 150, Text = "North West", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } }
    }).ToList();
    public class MyLinkDefinition
    {
        public NodeAnchor Source { get; set; }
        public NodeAnchor Target { get; set; }
        public LinkType Type { get; set; }
    }
    List<MyLinkDefinition> links = new string[] { "r", "d", "e" }.SelectMany(prefix => new List<MyLinkDefinition>
{
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.West }, Target = new NodeAnchor { NodeId = prefix + "w", Port = Position.East } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.NorthWest }, Target = new NodeAnchor { NodeId = prefix + "nw", Port = Position.SouthEast } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.North }, Target = new NodeAnchor { NodeId = prefix + "n", Port = Position.South } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.NorthEast }, Target = new NodeAnchor { NodeId = prefix + "ne", Port = Position.SouthWest } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.East }, Target = new NodeAnchor { NodeId = prefix + "e", Port = Position.West } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.SouthEast }, Target = new NodeAnchor { NodeId = prefix + "se", Port = Position.NorthWest } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.South }, Target = new NodeAnchor { NodeId = prefix + "s", Port = Position.North } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.SouthWest }, Target = new NodeAnchor { NodeId = prefix + "sw", Port = Position.NorthEast } },
    }).ToList();
    private Diagram Diagram { get; set; }
    
}
