@page "/"
@X1 @Y1 @X2 @Y2
<button @onclick="NewGraph1">R</button>

@code {
    public double X1 { get; set; } = 300;
    public double Y1 { get; set; } = 300;
    public double X2 { get; set; } = 500;
    public double Y2 { get; set; } = 300;

     public void NewGraph1()
    {
        //links1[0].LinkType= LinkType.Curved;
                //links1[1].LinkType= LinkType.Angled;

X1=p.X;
X2=q.X;
Y1=p.Y;
        Y2 = q.Y;
        run_auto_layout = true;

        StateHasChanged();
        }

}



<div style="height: 1000px; width: 1000px;">
<Diagram @ontouchstart="NewGraph1">
    <Nodes>
        <RectangleNode X="200" Y="200" Movable="false">
            Hello fixed node
        </RectangleNode>
        <RectangleNode @bind-X="p.X" @bind-Y="p.Y" >
            Hello movable node
        </RectangleNode>
        <Node Id="abc" @bind-X="q.X" @bind-Y="q.Y">
            Hello node @context.Id
        </Node>
        <Node Id="hij" @bind-X="r.X" @bind-Y="r.Y">
            Hello node @context.Id
        </Node>
        <Node Id="def" X="X1" Y="X2">
            Hello node @context.Id
        </Node>
    </Nodes>

    <Links/>
</Diagram>
</div>


@code {
    public Excubo.Blazor.Diagrams.Point p = new Excubo.Blazor.Diagrams.Point(400, 200);
    public Excubo.Blazor.Diagrams.Point q = new Excubo.Blazor.Diagrams.Point(300, 100);
    public Excubo.Blazor.Diagrams.Point r = new Excubo.Blazor.Diagrams.Point(500, 300);

}



<div style="height: 1000px; width: 1000px;">

<Diagram>
    <Nodes>
        @foreach (var node in nodes1)
        {
            if (node.Type == NodeType.Rectangle)
            {
                <RectangleNode @key="@node.Id" Id="@node.Id" X="node.X" XChanged="(x) => { node.X = x; no_implicit_render = true; }" Y="node.Y" YChanged="(y) => { node.Y = y; no_implicit_render = true; }">
                    <div style="min-width:4em; min-height:1em">@node.Id</div>
                </RectangleNode>
            }
            else
            {
                <EllipseNode @key="@node.Id" Id="@node.Id" X="node.X" XChanged="(x) => { node.X = x; no_implicit_render = true; }" Y="node.Y" YChanged="(y) => { node.Y = y; no_implicit_render = true; }">
                    <div style="min-width:4em; min-height:1em">@node.Id</div>
                </EllipseNode>
            }
        }
    </Nodes>
    <Links>
        @foreach (var link in links1)
        {
                            link.Arrow=Arrow.Both;

                link.LinkType= LinkType.Angled;
            <CurvedLink @key="@((link.Source, link.Target))" Source="@link.Source" Target="@link.Target" />
        
        }
    </Links>
    <AutoLayoutSettings @ref="auto_layout" Algorithm="Algorithm.TreeVertical" />
    <OverviewSettings Position="Position.BottomRight" ViewableAreaBorderColor="green" ViewableAreaFillColor="white"
                      BackgroundColor="#DDDDDD" ViewableAreaBorderWidth="1" FullBorder="true" />
</Diagram>
</div>

<button @onclick="NewGraph">Random new graph</button>
<button @onclick="NewRectangle">Add rectangle</button>
<button @onclick="NewEllipse">Add ellipse</button>
<button @onclick="RemoveFirstNode">Remove first node</button>
<button @onclick="RemoveLastNode">Remove last node</button>
<button @onclick="NewLink">Add random link</button>
<button @onclick="RemoveFirstLink">Remove first link</button>

@asoInt

@code {
    public string asoInt="0";

    private void NewGraph()
    {
        var rnd = new Random((int)DateTime.Now.Ticks);
        nodes1.Clear();
        nodes1.AddRange(Enumerable.Range(0, rnd.Next(10, 20)).Select(i => new MyNode { Id = "N" + rnd.Next(100 * i, 100 * (i + 1)).ToString(), Type = NodeType.Rectangle }));
        links1.Clear();

        links1.AddRange(Enumerable.Range(0, rnd.Next(10, 20))
        .Select(_ =>
        {
            var selection = nodes1.OrderBy(_ => rnd.NextDouble()).Take(2).OrderBy(v => v.Id).ToList();
            return new LinkData { Source = selection[0].Id, Target = selection[1].Id };
        
        }));
       // nodes1[0].Type=NodeType.Ellipse;
         //       links1[0].Arrow=Arrow.Target;
           //     links1[1].Arrow=Arrow.Both;
       // asoInt=links1[0].LinkType.ToString();
        run_auto_layout = true;
        
        StateHasChanged();
    }
    private void NewRectangle()
    {
        nodes1.Add(new MyNode { Id = Guid.NewGuid().ToString(), X = 100, Y = 100, Type = NodeType.Rectangle });
        run_auto_layout = true;
        StateHasChanged();
    }
    private void NewEllipse()
    {
        nodes1.Add(new MyNode { Id = Guid.NewGuid().ToString(), X = 100, Y = 100, Type = NodeType.Ellipse });
        run_auto_layout = true;
        StateHasChanged();
    }
    private void RemoveFirstNode()
    {
        if (nodes1.Any())
        {
            nodes1.RemoveAt(0);
        }
        run_auto_layout = true;
        StateHasChanged();
    }
    private void RemoveLastNode()
    {
        if (nodes1.Any())
        {
            nodes1.RemoveAt(nodes1.Count - 1);
        }
        run_auto_layout = true;
        StateHasChanged();
    }
    private void NewLink()
    {
        if (nodes1.Count < 2)
        {
            return;
        }
        var rnd = new Random((int)DateTime.Now.Ticks);
        var source = nodes1.OrderBy(_ => rnd.NextDouble()).First();
        var target = nodes1.Except(new[] { source }).OrderBy(_ => rnd.NextDouble()).First();
        links1.Add(new LinkData { Source = source.Id, Target = target.Id });
        run_auto_layout = true;
        StateHasChanged();
    }
    private void RemoveFirstLink()
    {
        if (links1.Any())
        {
            links1.RemoveAt(0);
        }
        run_auto_layout = true;
        StateHasChanged();
    }
    private AutoLayoutSettings auto_layout;
    private bool run_auto_layout;
    class MyNode
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public NodeType Type { get; set; }
    }
    private List<MyNode> nodes1 = new List<MyNode>
    {
    };
    private List<LinkData> links1 = new List<LinkData>
    {
    };
    private bool no_implicit_render;
    protected override bool ShouldRender()
    {
        if (no_implicit_render)
        {
            no_implicit_render = false;
            return false;
        }
        return base.ShouldRender();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (run_auto_layout)
        {
            auto_layout.Run();
            run_auto_layout = false;
        }
    }
}

<div style="height: 1000px; width: 1000px;">

<Diagram>
    <Nodes>

        <!-- Builtin node, node-type (i.e. shape) specified by Type property -->
        <FixedSizeNode Id="n1" @bind-X="n1p.X" @bind-Y="n1p.Y" Type="NodeType.Rectangle" Width="60" Height="40">
            <div style="width:4em; height:3em"></div>
        </FixedSizeNode>
        <FixedSizeNode Id="n2" @bind-X="n2p.X" @bind-Y="n2p.Y" Type="NodeType.Ellipse" Width="40" Height="24">
            <div style="width:4em; height:3em"></div>
        </FixedSizeNode>
        <FixedSizeNode Id="n3" @bind-X="n3p.X" @bind-Y="n3p.Y" Type="NodeType.Diamond" Width="40" Height="24">
            <div style="width:4em; height:3em"></div>
        </FixedSizeNode>
        <FixedSizeNode Id="n4" @bind-X="n4p.X" @bind-Y="n4p.Y" Type="NodeType.Rectangle" Width="60" Height="40">
            <div style="width:4em; height:3em"></div>
        </FixedSizeNode>
    </Nodes>
    <!-- side note: maybe rename link to connector, as link seems to be a special tag, so auto-correct corrects Link to link all the time. -->
    <Links OnRemove="LinkRemoved" OnAdd="LinkAdded" @bind-DefaultType="link_type" @bind-DefaultArrow="arrows">
        <AngledLink Source="l1s" Target="l1t" Arrow="Arrow.None" />
        <CurvedLink Source="l2s" Target="l2t" Arrow="Arrow.Target" />
        <StraightLink Source="l3s" Target="l3t" Arrow="Arrow.Both" />
    </Links>
    <LinkSelectorSettings Position="Position.TopRight" />
</Diagram>
</div>

@code {
    private Excubo.Blazor.Diagrams.Point n1p = new Excubo.Blazor.Diagrams.Point(100, 100);
    private Excubo.Blazor.Diagrams.Point n2p = new Excubo.Blazor.Diagrams.Point(100, 300);
    private Excubo.Blazor.Diagrams.Point n3p = new Excubo.Blazor.Diagrams.Point(300, 100);
    private Excubo.Blazor.Diagrams.Point n4p = new Excubo.Blazor.Diagrams.Point(300, 300);
    private NodeAnchor l1s = new NodeAnchor { NodeId = "n1", Port = Position.BottomRight };
    private NodeAnchor l1t = new NodeAnchor { NodeId = "n4", Port = Position.TopLeft };
    private NodeAnchor l2s = new NodeAnchor { NodeId = "n1", Port = Position.TopRight };
    private NodeAnchor l2t = new NodeAnchor { NodeId = "n3", Port = Position.BottomLeft };
    private NodeAnchor l3s = new NodeAnchor { NodeId = "n1", Port = Position.Bottom };
    private NodeAnchor l3t = new NodeAnchor { NodeId = "n2", Port = Position.Top };
    private LinkType link_type { get; set; } = LinkType.Curved;
    private Arrow arrows { get; set; } = Arrow.Both;
    private void LinkRemoved(LinkBase link)
    {
        Console.WriteLine($"A link was removed: {link.Source} -> {link.Target}");
    }
    private void LinkAdded(LinkBase link)
    {
        Console.WriteLine($"A link was added: {link.Source} -> {link.Target}");
    }
}

<div style="height: 1000px; width: 1000px;">

<Diagram @ref="Diagram">
    <Nodes>
        <style>
            .port-node {
                width: 4em;
                height: 3em;
                display: grid;
                place-items: center;
                text-align: center;
            }
        </style>
        @foreach (var node in nodes)
        {
            <Node @key="@(node.Id)" Id="@(node.Id)" @bind-X="node.X" @bind-Y="node.Y" Type="node.Type" MinHeight="30" MinWidth="60" ContentClasses="port-node">
                @node.Text
            </Node>
        }
    </Nodes>
    <Links>
        @foreach (var link in links)
        {
            <Link @key="link.Source.NodeId + link.Target.NodeId" Source="link.Source" Target="link.Target" />
        }
    </Links>
    <NavigationSettings Origin="origin" />
</Diagram>
</div>

@code {
    private Excubo.Blazor.Diagrams.Point origin { get; set; } = new Excubo.Blazor.Diagrams.Point(-200, -200);
    public class MyNodeDefinition
    {
        public string Id { get; set; }
        public double X { get; set; }
        public double Y { get; set; }
        public string Text { get; set; }
        public NodeType Type { get; set; }
    }
    List<MyNodeDefinition> nodes = new string[] { "r", "d", "e" }.SelectMany((prefix, index) => new List<MyNodeDefinition>
{
        new MyNodeDefinition { Id = prefix + "c", X = ((index == 1) ? 500 : 0) + 0, Y = ((index == 2) ? 500 : 0) + 0, Text = "Center", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "n", X = ((index == 1) ? 500 : 0) + 0, Y = ((index == 2) ? 500 : 0) - 150, Text = "North", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "s", X = ((index == 1) ? 500 : 0) + 0, Y = ((index == 2) ? 500 : 0) + 150, Text = "South", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "e", X = ((index == 1) ? 500 : 0) + 150, Y = ((index == 2) ? 500 : 0) + 0, Text = "East", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "w", X = ((index == 1) ? 500 : 0) - 150, Y = ((index == 2) ? 500 : 0) + 0, Text = "West", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "ne", X = ((index == 1) ? 500 : 0) + 150, Y = ((index == 2) ? 500 : 0) - 150, Text = "North East", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "se", X = ((index == 1) ? 500 : 0) + 150, Y = ((index == 2) ? 500 : 0) + 150, Text = "South East", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "sw", X = ((index == 1) ? 500 : 0) - 150, Y = ((index == 2) ? 500 : 0) + 150, Text = "South West", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } },
        new MyNodeDefinition { Id = prefix + "nw", X = ((index == 1) ? 500 : 0) - 150, Y = ((index == 2) ? 500 : 0) - 150, Text = "North West", Type = index switch { 0 => NodeType.Rectangle, 1 => NodeType.Ellipse, _ => NodeType.Diamond } }
    }).ToList();
    public class MyLinkDefinition
    {
        public NodeAnchor Source { get; set; }
        public NodeAnchor Target { get; set; }
        public LinkType Type { get; set; }
    }
    List<MyLinkDefinition> links = new string[] { "r", "d", "e" }.SelectMany(prefix => new List<MyLinkDefinition>
{
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.West }, Target = new NodeAnchor { NodeId = prefix + "w", Port = Position.East } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.NorthWest }, Target = new NodeAnchor { NodeId = prefix + "nw", Port = Position.SouthEast } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.North }, Target = new NodeAnchor { NodeId = prefix + "n", Port = Position.South } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.NorthEast }, Target = new NodeAnchor { NodeId = prefix + "ne", Port = Position.SouthWest } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.East }, Target = new NodeAnchor { NodeId = prefix + "e", Port = Position.West } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.SouthEast }, Target = new NodeAnchor { NodeId = prefix + "se", Port = Position.NorthWest } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.South }, Target = new NodeAnchor { NodeId = prefix + "s", Port = Position.North } },
        new MyLinkDefinition { Source = new NodeAnchor { NodeId = prefix + "c", Port = Position.SouthWest }, Target = new NodeAnchor { NodeId = prefix + "sw", Port = Position.NorthEast } },
    }).ToList();
    private Diagram Diagram { get; set; }
}



@if (start)
{
    <div class="whiteboard-container">
        <WhiteBoard Name="@canvasModel.Name" DataUrl="@canvasModel.ImageUrl" IsStartNew="HandleNewWhiteboard" />
    </div>
}
else
{
<div class="home-grid">
    <div class="form">
         <StartForm @bind-CanvasModel="canvasModel" OnBegin="StartWhiteboard"></StartForm>
    </div>
    <div class="auth-container">
        <AuthorizeView>
            <Authorized>
                <div style="margin-right: 1rem">
                    Hello, @context.User.Identity.Name!
                    <a href="/.auth/logout?post_logout_redirect_uri=/" style="color: blue"> Log out</a>
                </div>                
                <div class="app-icon">
                    <NavLink href="whiteBoardHome">
                        <img width="64" height="64" src="icons/app-icon-128.png" />
                        <span>Advanced Whiteboard</span>
                    </NavLink>
                </div>
            </Authorized>
            <NotAuthorized>
                <div style="margin-right: 1rem">
                    <LoginProvider/>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

}

